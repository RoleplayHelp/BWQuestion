const serverLink = 'https://discord.gg/6ZyU2xHs'; // Thay b·∫±ng link th·∫≠t

const tree = {
  q1: {
    text: 'üß† B·∫°n c√≥ bi·∫øt ƒë√¢y l√† m·ªôt server dark fantasy ‚Äì combat s·ª≠ d·ª•ng ch·ªâ s·ªë v√† kh√¥ng s·ª≠ d·ª•ng may r·ªßi kh√¥ng?',
    yes: 'q2a',
    no: 'q2b'
  },
  q2a: {
    text: '‚öîÔ∏è B·∫°n ƒë√£ t·ª´ng roleplay combat ch·ªâ s·ªë bao gi·ªù ch∆∞a?',
    yes: 'q3a',
    no: 'q3b'
  },
  q2b: {
    text: 'üìê Server s·ª≠ d·ª•ng ch·ªâ s·ªë v√† logic th·ª±c t·∫ø (~70%) ƒë·ªÉ combat, kh√¥ng d√πng may r·ªßi. B·∫°n th·∫•y ·ªïn v·ªõi ƒëi·ªÅu n√†y ch·ª©?',
    yes: 'q2a',
    no: 'end_reject_1'
  },
  q3a: {
    text: 'üß© B·∫°n c√≥ c·∫£m th·∫•y tho·∫£i m√°i khi ph√¢n t√≠ch t√¨nh hu·ªëng chi·∫øn ƒë·∫•u logic thay v√¨ tung x√∫c x·∫Øc ƒë·ªÉ quy·∫øt ƒë·ªãnh?',
    yes: 'q4',
    no: 'end_reject_2'
  },
  q3b: {
    text: 'üìò B·∫°n c√≥ s·∫µn s√†ng h·ªçc c√°ch s·ª≠ d·ª•ng ch·ªâ s·ªë ƒë·ªÉ x·ª≠ l√Ω t√¨nh hu·ªëng RP kh√¥ng? Admin lu√¥n s·∫µn s√†ng h·ªó tr·ª£ t·ª´ v√≠ d·ª• ƒë·∫øn h∆∞·ªõng d·∫´n chi ti·∫øt.',
    yes: 'q4',
    no: 'end_reject_3'
  },
  q4: {
    text: 'üõ†Ô∏è H·ªá th·ªëng k·ªπ nƒÉng s·∫Ω do b·∫°n t·ª± x√¢y d·ª±ng theo tr√≠ t∆∞·ªüng t∆∞·ª£ng c·ªßa m√¨nh trong khu√¥n kh·ªï admin cho ph√©p. Admin s·∫Ω g·ª£i √Ω v√† gi√∫p b·∫°n ho√†n thi·ªán n·∫øu c·∫ßn.',
    yes: 'q5',
    no: 'end_reject_4'
  },
  q5: {
    text: 'üìú C√¢u chuy·ªán c·ªßa server c√≥ kh·ªüi ƒë·∫ßu, k·∫øt th√∫c v√† nhi·ªÅu nh√°nh t√πy l·ª±a ch·ªçn. B·∫°n c√≥ s·∫µn s√†ng ƒë·ªìng h√†nh kh√¥ng?',
    answers: {
      yes: () => endWithLink('üéâ C·∫£m ∆°n b·∫°n ƒë√£ s·∫µn s√†ng ƒë·ªìng h√†nh!'),
      maybe: () => endWithLink('‚ú® Kh√¥ng sao c·∫£, v√†o th·ª≠ xem vibe c√≥ h·ª£p kh√¥ng nha!'),
      no: 'end_reject_5'
    }
  }
};

const messages = {
  end_reject_1: '‚ùå C√≥ v·∫ª server thi√™n v·ªÅ ch·ªâ s·ªë v√† logic kh√¥ng h·ª£p v·ªõi b·∫°n. C·∫£m ∆°n v√¨ ƒë√£ gh√© qua!',
  end_reject_2: 'ü§î N·∫øu kh√¥ng th√≠ch ph√¢n t√≠ch logic, c√≥ th·ªÉ b·∫°n s·∫Ω kh√¥ng enjoy server n√†y l·∫Øm. C·∫£m ∆°n b·∫°n.',
  end_reject_3: 'üìö Kh√¥ng sao c·∫£! N·∫øu sau n√†y b·∫°n mu·ªën h·ªçc th·ª≠ h·ªá th·ªëng ch·ªâ s·ªë, c·ª© gh√© l·∫°i nh√©.',
  end_reject_4: '‚ö†Ô∏è Server thi√™n v·ªÅ s√°ng t·∫°o k·ªπ nƒÉng c√° nh√¢n, n√™n n·∫øu kh√¥ng h·ª£p th√¨ r·∫•t ti·∫øc nha.',
  end_reject_5: 'üí¨ C√≥ v·∫ª b·∫°n kh√¥ng mu·ªën theo c·ªët truy·ªán d√†i h·∫°n. T·ª•i m√¨nh v·∫´n lu√¥n ch√†o ƒë√≥n n·∫øu b·∫°n ƒë·ªïi √Ω!'
};

function endWithLink(msg) {
  document.getElementById('question').innerHTML = msg;
  document.getElementById('answers').innerHTML = `<a href="${serverLink}" target="_blank"><button><i class='fas fa-scroll'></i> Tham gia Server</button></a>`;
}

function render(id) {
  const container = document.querySelector('.container');
  container.classList.remove('visible');

  setTimeout(() => {
    const node = tree[id];
    if (!node) return;

    document.getElementById('question').innerText = node.text;
    const answersDiv = document.getElementById('answers');
    answersDiv.innerHTML = '';

    if (node.answers) {
      const btns = [
        { label: '‚úÖ C√≥', next: node.answers.yes },
        { label: 'ü§î Ch∆∞a ch·∫Øc', next: node.answers.maybe },
        { label: 'üö´ Kh√¥ng', next: node.answers.no }
      ];
      btns.forEach(({ label, next }) => {
        const btn = document.createElement('button');
        btn.textContent = label;
        btn.onclick = () => {
          if (typeof next === 'function') next();
          else end(next);
        };
        answersDiv.appendChild(btn);
      });
    } else {
      const yesBtn = document.createElement('button');
      yesBtn.innerHTML = '<i class="fas fa-check"></i> Yes';
      yesBtn.onclick = () => render(node.yes);
      const noBtn = document.createElement('button');
      noBtn.innerHTML = '<i class="fas fa-times"></i> No';
      noBtn.onclick = () => {
        const next = node.no;
        if (typeof next === 'string' && next.startsWith('end')) end(next);
        else render(next);
      };
      answersDiv.appendChild(yesBtn);
      answersDiv.appendChild(noBtn);
    }

    container.classList.add('visible');
  }, 300);
}

function end(code) {
  document.getElementById('question').innerText = '';
  document.getElementById('answers').innerHTML = '';
  document.getElementById('end').innerText = messages[code] || 'C·∫£m ∆°n b·∫°n ƒë√£ tham gia.';
}

// Intro animation
window.onload = () => {
  setTimeout(() => {
    document.getElementById('introScreen').style.display = 'none';
    const main = document.getElementById('mainContent');
    main.classList.remove('hidden');
    main.classList.add('visible');
    render('q1');
  }, 3000);
};
